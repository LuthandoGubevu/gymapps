
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to check authentication and roles
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserProfile(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData(userId) {
      // Caching the result of get() is not possible across rule evaluations,
      // but this function improves readability.
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isUserAuthenticated() && getUserData(request.auth.uid).role == 'admin';
    }
    
    // User Profiles
    match /users/{userId} {
      // Admins can list all users and read/write any individual profile.
      allow list, read, write: if isAdmin();
      
      // A user can read and update their own profile.
      // A new user can also create their own user document during signup.
      allow read, update, create: if isUserProfile(userId);
    }
    
    // Gyms
    match /gyms/{gymId} {
      // Anyone authenticated can read and list gym info.
      // This is needed for the admin panel and the signup dropdown.
      allow read, list: if isUserAuthenticated();
      
      // Only admins can create, update, or delete gyms.
      allow create, update, delete: if isAdmin();
    }
    
    // Bookings (Covers both 'classBookings' and 'trainerBookings')
    match /{bookingCollection}/{bookingId}
    where bookingCollection in ['classBookings', 'trainerBookings'] {
       // Admins can perform any action on any booking.
       allow read, list, create, update, delete: if isAdmin();
       
       // Users can create bookings for themselves.
       allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
       
       // Users can read their own bookings.
       allow read: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Chat
    match /chats/{gymId}/messages/{messageId} {
      // Users can read messages in their primary gym. Admins can read all chats.
      allow read: if isAdmin() || (isUserAuthenticated() && getUserData(request.auth.uid).primaryGym == gymId);
      
      // Users can only write messages to their primary gym's chat.
      allow create: if isUserAuthenticated() 
                  && request.resource.data.sender.id == request.auth.uid 
                  && getUserData(request.auth.uid).primaryGym == gymId;
                  
      // Admins can delete any message.
      allow delete: if isAdmin();
    }
  }
}
