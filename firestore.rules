
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================
    // Helper Functions
    // =================================
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isAdmin() {
      // Check for authentication first to prevent errors on null user
      return isUserAuthenticated() && getUserData().role == 'admin';
    }
    
    function isRequestingOwnData(userId) {
        return request.auth.uid == userId;
    }

    // =================================
    // Collection Rules
    // =================================

    // Users Collection
    match /users/{userId} {
      // Admins can perform any action on any user profile
      allow read, write: if isAdmin();
      
      // Authenticated users can create their own user document on sign up
      allow create: if isUserAuthenticated();
      
      // Users can read and update their own profile information
      allow read, update: if isUserAuthenticated() && isRequestingOwnData(userId);
    }
    
    // Gyms Collection
    match /gyms/{gymId} {
        // Any authenticated user can view the list of gyms and their details
        allow read: if isUserAuthenticated();
        
        // Only admins can add, edit, or remove gyms
        allow create, update, delete: if isAdmin();
    }

    // Class Bookings Collection
    match /classBookings/{bookingId} {
        // Admins can read and write (accept/decline) any booking
        allow read, write: if isAdmin();
        
        // Users can create a new booking request for themselves
        allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;

        // Users can read their own bookings to see the status
        allow read: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Trainer Bookings Collection
    match /trainerBookings/{bookingId} {
        // Admins can read and write (accept/decline) any booking
        allow read, write: if isAdmin();
        
        // Users can create a new booking request for themselves
        allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;

        // Users can read their own bookings to see the status
        allow read: if isUserAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    // Chats Collection
    match /chats/{locationId}/messages/{messageId} {
        // Admins can read/delete any message and post announcements
        allow read, delete: if isAdmin();
        allow create: if isAdmin() && request.resource.data.isAnnouncement == true;

        function isMemberOfGym(gymLocationId) {
            return getUserData().primaryGym == gymLocationId;
        }

        // Users can read and write messages in their primary gym's chat
        allow read: if isUserAuthenticated() && isMemberOfGym(locationId);
        allow create: if isUserAuthenticated() && isMemberOfGym(locationId) && request.resource.data.isAnnouncement != true;
    }
  }
}
