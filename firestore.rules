
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAdmin() {
      // Checks if the user document exists and has the 'admin' role.
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      // Checks if the requester is the owner of the document.
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isUserAuthenticated() {
      // Checks if a user is signed in.
      return request.auth != null;
    }
    
    // --- Collections Rules ---

    // User Profiles
    match /users/{userId} {
      // Admins can read any user profile. Users can only read/update their own.
      allow read, update: if isOwner(userId) || isAdmin();
      // Any authenticated user can create a profile (sign up).
      allow create: if isUserAuthenticated();
      // Admins can list all users (for total user count on dashboard).
      allow list: if isAdmin();
    }

    // Gym Information
    match /gyms/{gymId} {
      // Any authenticated user can read gym info (for dropdowns, schedules, etc.).
      allow read: if isUserAuthenticated();
      // Only admins can create, update, or delete gyms.
      allow create, update, delete: if isAdmin();
    }

    // Class Bookings
    match /classBookings/{bookingId} {
      // Admins can read/update any booking. Users can read their own.
      allow read, update: if isAdmin() || (isUserAuthenticated() && resource.data.userId == request.auth.uid);
      // Users can only create bookings for themselves.
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Admins need to list all bookings for the dashboard view.
      allow list: if isAdmin(); 
    }

    // Trainer Bookings
    match /trainerBookings/{bookingId} {
      // Admins can read/update any booking. Users can read their own.
      allow read, update: if isAdmin() || (isUserAuthenticated() && resource.data.userId == request.auth.uid);
      // Users can only create bookings for themselves.
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      // Admins need to list all bookings for the dashboard view.
      allow list: if isAdmin();
    }

    // Live Chat
    match /chats/{gymId}/messages/{messageId} {
      function isMemberOfGym(gymIdToCheck) {
        // Checks if the user's primary gym matches the chat room ID.
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryGym == gymIdToCheck;
      }
      
      // Admins can read/delete any message in any chat for moderation.
      allow read, delete: if isAdmin();

      // Users can read all messages in their own gym's chat.
      allow read: if isUserAuthenticated() && isMemberOfGym(gymId);
      
      // Users can create messages in their own gym's chat and must be the sender.
      allow create: if isUserAuthenticated() && 
                       isMemberOfGym(gymId) &&
                       request.resource.data.sender.id == request.auth.uid;
    }
  }
}
