
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      // Check for the existence of the user document and their role.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user belongs to the specified gym.
    function isUserPrimaryGym(gymId) {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.primaryGym == gymId;
    }

    // Rules for the 'users' collection.
    match /users/{userId} {
      // Users can create their own account.
      allow create: if request.auth.uid == userId;
      
      // Users can read and update their own profile.
      allow read, update: if request.auth.uid == userId;
      
      // Admins can get any user document and list the whole collection for stats.
      allow get, list: if isAdmin();
    }

    // Rules for the 'gyms' collection.
    match /gyms/{gymId} {
      // Any authenticated user can read gym data (for dropdowns, etc.).
      allow read: if request.auth != null;
      
      // Only admins can modify the gyms collection.
      allow create, update, delete: if isAdmin();
    }

    // Rules for class bookings.
    match /classBookings/{bookingId} {
      // Users can read their own bookings.
      allow read: if request.auth.uid == resource.data.userId;
      
      // Users can create bookings for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;

      // Admins can list and update all bookings.
      allow list, update: if isAdmin();
    }
    
    // Rules for trainer bookings.
    match /trainerBookings/{bookingId} {
      // Users can read their own bookings.
      allow read: if request.auth.uid == resource.data.userId;
      
      // Users can create bookings for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;

      // Admins can list and update all bookings.
      allow list, update: if isAdmin();
    }
    
    // Rules for the 'chats' collection, nested by gym location.
    match /chats/{gymId}/messages/{messageId} {
      // Users can read and create messages in their primary gym's chat.
      // Admins can also perform any action in any chat.
      allow read, create: if isUserPrimaryGym(gymId) || isAdmin();
      
      // Only admins can delete messages.
      allow delete: if isAdmin();
    }
  }
}
